title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Subsurface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
cdf = read.table("EasiFunBacNet.SF.top100.cross.csv", header=T,sep=",")
head(cdf)
Bac.net.taxmat <- read.table("BAC.network.taxonomy.csv", header=T,sep=",")
Fun.net.taxmat <- read.table("FG.network.taxonomy.csv", header=T,sep=",")
tax.circlize = rbind(Fun.net.taxmat,Bac.net.taxmat)
head(tax.circlize)
cdf.w.tax = data.frame(OTU1=tax.circlize[match(cdf$OTU1, tax.circlize$OTU.ID), 4], OTU2=tax.circlize[match(cdf$OTU2, tax.circlize$OTU.ID), 4], WEIGHT=cdf$WEIGHT)
cdf.w.tax
cdf.w.tax$OTU1 <- as.character(cdf.w.tax$OTU1)
cdf.w.tax$OTU2 <- as.character(cdf.w.tax$OTU2)
str(cdf.w.tax)
cdf.w.tax[is.na(cdf.w.tax)] <- "unidentified"
circos.clear()
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
circos.clear()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
library(SpiecEasi)
library(igraph)
Bac.otus <- read.table("MC2018.network.BAC.otu_table.csv",
header=T,sep=",",row.names = 1)
Bac.otumat <- as(as.matrix(Bac.otus), "matrix")
Bac.OTU = otu_table(Bac.otumat, taxa_are_rows = TRUE)
Bac.taxmat <- read.table("BAC.network.taxonomy.csv", header=T,sep=",",row.names=1)
Bac.taxmat <- as(as.matrix(Bac.taxmat),"matrix")
Bac.TAX = tax_table(Bac.taxmat)
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",
header=TRUE,row.names=1,
sep="\t",stringsAsFactors=FALSE)
sampleData <- sample_data(meta)
Bac.physeq = phyloseq(Bac.OTU,Bac.TAX,sampleData)
Bac.physeq.prune = prune_taxa(taxa_sums(Bac.physeq) > 5, Bac.physeq)
set.seed(711)
Bac.physeq.prune.rarefy = rarefy_even_depth(Bac.physeq.prune, sample.size = 37435, replace = FALSE, trimOTUs = TRUE)
Bac.physeq.prune.rarefy
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Rhizaria")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Chromista")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Unassigned")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
Bac.physeq.prune.rarefy
Bac.physeq.prune.rarefy.SF = subset_samples(Bac.physeq.prune.rarefy, Layer=="Surface")
Bac.physeq.prune.rarefy.SUB = subset_samples(Bac.physeq.prune.rarefy, Layer=="Subsurface")
Fun.otus <- read.table("MC2018.network.FG.otu_table.csv",header=T,sep=",",row.names=1)
Fun.otumat <- as(as.matrix(Fun.otus), "matrix")
Fun.OTU = otu_table(Fun.otumat, taxa_are_rows = TRUE)
Fun.taxmat <- read.table("FG.network.taxonomy.csv", header=T,sep=",",row.names=1)
Fun.taxmat <- as(as.matrix(Fun.taxmat),"matrix")
Fun.TAX = tax_table(Fun.taxmat)
Fun.physeq = phyloseq(Fun.OTU,Fun.TAX,sampleData)
Fun.physeq.prune = prune_taxa(taxa_sums(Fun.physeq) > 1, Fun.physeq)
set.seed(1)
Fun.physeq.prune.rarefy = rarefy_even_depth(Fun.physeq.prune, sample.size = 6842, replace = FALSE, trimOTUs = FALSE)
Fun.physeq.prune.rarefy
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "Rhizaria")
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "Chromista")
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "Unassigned")
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "NA")
Fun.physeq.prune.rarefy
Fun.physeq.prune.rarefy.SF = subset_samples(Fun.physeq.prune.rarefy, Layer=="Surface")
Fun.physeq.prune.rarefy.SUB = subset_samples(Fun.physeq.prune.rarefy, Layer=="Subsurface")
Bac.physeq.prune.rarefy.LAC.SF = subset_samples(Bac.physeq.prune.rarefy, Crust_type=="LAC")
Bac.physeq.prune.rarefy.LAC.SF.top150 = prune_taxa(names(sort(taxa_sums(Bac.physeq.prune.rarefy.LAC.SF), TRUE))[1:150], Bac.physeq.prune.rarefy.LAC.SF)
Fun.physeq.prune.rarefy.LAC.SF = subset_samples(Fun.physeq.prune.rarefy, Crust_type=="LAC")
Fun.physeq.prune.rarefy.LAC.SF.top150 = prune_taxa(names(sort(taxa_sums(Fun.physeq.prune.rarefy.LAC.SF), TRUE))[1:150], Fun.physeq.prune.rarefy.LAC.SF)
FG.BAC.SF.merged = merge_phyloseq(Bac.physeq.prune.rarefy.LAC.SF.top150, Fun.physeq.prune.rarefy.LAC.SF.top150)
easi.fun.bac.SF.net = load(file = "easi.fun.bac.LAC.SF.net.e2L1000.rda")
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL,shape = "Kingdom", hjust = 0.5)
load(file = "easi.fun.bac.LAC.SF.net.e2L1000.rda")
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL,shape = "Kingdom", hjust = 0.5)
load(file = "easi.fun.bac.LAC.SF.net.e2L1000.rda")
View(easi.fun.bac.SF.net)
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL,shape = "Kingdom", hjust = 0.5)
Bac.physeq.prune.rarefy.LAC.SF = subset_samples(Bac.physeq.prune.rarefy, Crust_type=="LAC")
Bac.physeq.prune.rarefy.LAC.SF.top200 = prune_taxa(names(sort(taxa_sums(Bac.physeq.prune.rarefy.LAC.SF), TRUE))[1:200], Bac.physeq.prune.rarefy.LAC.SF)
Fun.physeq.prune.rarefy.LAC.SF = subset_samples(Fun.physeq.prune.rarefy, Crust_type=="LAC")
Fun.physeq.prune.rarefy.LAC.SF.top200 = prune_taxa(names(sort(taxa_sums(Fun.physeq.prune.rarefy.LAC.SF), TRUE))[1:200], Fun.physeq.prune.rarefy.LAC.SF)
FG.BAC.SF.merged = merge_phyloseq(Bac.physeq.prune.rarefy.LAC.SF.top200, Fun.physeq.prune.rarefy.LAC.SF.top200)
load(file = "easi.fun.bac.LAC.SF.net.e2L1000.rda")
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum = plot_network(easi.fun.bac.SF.net)
plot_network(easi.fun.bac.SF.net)
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Class", label = NULL,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Class", label = "Genus",shape = "Kingdom", hjust = 0.5)
psplotnet.phylum
#Bac.physeq.prune.rarefy.LAC.SF = subset_samples(Bac.physeq.prune.rarefy, Crust_type=="LAC")
Bac.physeq.prune.rarefy.SF.top200 = prune_taxa(names(sort(taxa_sums(Bac.physeq.prune.rarefy.SF), TRUE))[1:200], Bac.physeq.prune.rarefy.SF)
#Fun.physeq.prune.rarefy.LAC.SF = subset_samples(Fun.physeq.prune.rarefy, Crust_type=="LAC")
Fun.physeq.prune.rarefy.SF.top200 = prune_taxa(names(sort(taxa_sums(Fun.physeq.prune.rarefy.SF), TRUE))[1:200], Fun.physeq.prune.rarefy.SF)
FG.BAC.SF.merged = merge_phyloseq(Bac.physeq.prune.rarefy.SF.top200, Fun.physeq.prune.rarefy.SF.top200)
load(file = "easi.fun.bac.SF.all.e2L40.net.rda")
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Class", label = NULL ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum
pdf("DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200.phylum.pdf", width = 15, height = 12)
psplotnet.phylum
dev.off()
psplotnet.phylum
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = "Class" ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = "Genus" ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum
pdf("Figures/DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200.phylum.pdf", width = 15, height = 10)
psplotnet.phylum
dev.off()
levels(psplotnet.phylum$data$Phylum) <- rev(levels(psplotnet.phylum$data$Phylum))
psplotnet.phylum
psplotnet.phylum
psplotnet.phylum
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = "Genus" ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
library(SpiecEasi)
library(igraph)
Bac.otus <- read.table("MC2018.network.BAC.otu_table.csv",
header=T,sep=",",row.names = 1)
Bac.otumat <- as(as.matrix(Bac.otus), "matrix")
Bac.OTU = otu_table(Bac.otumat, taxa_are_rows = TRUE)
Bac.taxmat <- read.table("BAC.network.taxonomy.csv", header=T,sep=",",row.names=1)
Bac.taxmat <- as(as.matrix(Bac.taxmat),"matrix")
Bac.TAX = tax_table(Bac.taxmat)
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",
header=TRUE,row.names=1,
sep="\t",stringsAsFactors=FALSE)
sampleData <- sample_data(meta)
Bac.physeq = phyloseq(Bac.OTU,Bac.TAX,sampleData)
Bac.physeq.prune = prune_taxa(taxa_sums(Bac.physeq) > 5, Bac.physeq)
set.seed(711)
Bac.physeq.prune.rarefy = rarefy_even_depth(Bac.physeq.prune, sample.size = 37435, replace = FALSE, trimOTUs = TRUE)
Bac.physeq.prune.rarefy
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Rhizaria")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Chromista")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Unassigned")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
Bac.physeq.prune.rarefy
Bac.physeq.prune.rarefy.SF = subset_samples(Bac.physeq.prune.rarefy, Layer=="Surface")
Bac.physeq.prune.rarefy.SUB = subset_samples(Bac.physeq.prune.rarefy, Layer=="Subsurface")
Fun.otus <- read.table("MC2018.network.FG.otu_table.csv",header=T,sep=",",row.names=1)
Fun.otumat <- as(as.matrix(Fun.otus), "matrix")
Fun.OTU = otu_table(Fun.otumat, taxa_are_rows = TRUE)
Fun.taxmat <- read.table("FG.network.taxonomy.csv", header=T,sep=",",row.names=1)
Fun.taxmat <- as(as.matrix(Fun.taxmat),"matrix")
Fun.TAX = tax_table(Fun.taxmat)
Fun.physeq = phyloseq(Fun.OTU,Fun.TAX,sampleData)
Fun.physeq.prune = prune_taxa(taxa_sums(Fun.physeq) > 1, Fun.physeq)
set.seed(1)
Fun.physeq.prune.rarefy = rarefy_even_depth(Fun.physeq.prune, sample.size = 6842, replace = FALSE, trimOTUs = FALSE)
Fun.physeq.prune.rarefy
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "Rhizaria")
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "Chromista")
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "Unassigned")
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
Fun.physeq.prune.rarefy = subset_taxa(Fun.physeq.prune.rarefy, Kingdom != "NA")
Fun.physeq.prune.rarefy
Fun.physeq.prune.rarefy.SF = subset_samples(Fun.physeq.prune.rarefy, Layer=="Surface")
Fun.physeq.prune.rarefy.SUB = subset_samples(Fun.physeq.prune.rarefy, Layer=="Subsurface")
#Bac.physeq.prune.rarefy.LAC.SF = subset_samples(Bac.physeq.prune.rarefy, Crust_type=="LAC")
Bac.physeq.prune.rarefy.SF.top200 = prune_taxa(names(sort(taxa_sums(Bac.physeq.prune.rarefy.SF), TRUE))[1:200], Bac.physeq.prune.rarefy.SF)
#Fun.physeq.prune.rarefy.LAC.SF = subset_samples(Fun.physeq.prune.rarefy, Crust_type=="LAC")
Fun.physeq.prune.rarefy.SF.top200 = prune_taxa(names(sort(taxa_sums(Fun.physeq.prune.rarefy.SF), TRUE))[1:200], Fun.physeq.prune.rarefy.SF)
FG.BAC.SF.merged = merge_phyloseq(Bac.physeq.prune.rarefy.SF.top200, Fun.physeq.prune.rarefy.SF.top200)
load(file = "easi.fun.bac.SF.all.e2L40.net.rda")
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = "Genus" ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum + + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
library(ggplot2)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
pdf("Figures/DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200.phylum.pdf", width = 15, height = 10)
psplotnet.phylum
dev.off()
pdf("Figures/DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200.phylum.pdf", width = 15, height = 10)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
dev.off()
pdf("Figures/DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200.phylum.pdf", width = 15, height = 10)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)") + theme(plot.title = element_text(hjust = 0.5))
dev.off()
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL ,shape = "Kingdom", hjust = 0.5)
pdf("Figures/DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200_no_label.phylum.pdf", width = 15, height = 10)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)") + theme(plot.title = element_text(hjust = 0.5))
dev.off()
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = "Genus" ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
pdf("Figures/DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200_no_label.phylum.pdf", width = 15, height = 10)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)") + theme(plot.title = element_text(hjust = 0.5))
dev.off()
set.seed(12345)
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = NULL ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
pdf("Figures/DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200_no_label.phylum.pdf", width = 15, height = 10)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)") + theme(plot.title = element_text(hjust = 0.5))
dev.off()
set.seed(12345)
psplotnet.phylum = plot_network(easi.fun.bac.SF.net, FG.BAC.SF.merged, type='taxa', color="Phylum", label = "Genus" ,shape = "Kingdom", hjust = 0.5)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)")
pdf("Figures/DOE.label.Biocrust_Microbial_Community_Network_Analysis_Surface_top_200.phylum.pdf", width = 15, height = 10)
psplotnet.phylum + ggtitle("Mojave Biocrust Microbial Community Network Analysis (Surface)") + theme(plot.title = element_text(hjust = 0.5))
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(circlize)
cdf = read.table("EasiFunBacNet.SF.top100.cross.csv", header=T,sep=",")
head(cdf)
Bac.net.taxmat <- read.table("BAC.network.taxonomy.csv", header=T,sep=",")
Fun.net.taxmat <- read.table("FG.network.taxonomy.csv", header=T,sep=",")
tax.circlize = rbind(Fun.net.taxmat,Bac.net.taxmat)
head(tax.circlize)
cdf.w.tax = data.frame(OTU1=tax.circlize[match(cdf$OTU1, tax.circlize$OTU.ID), 4], OTU2=tax.circlize[match(cdf$OTU2, tax.circlize$OTU.ID), 4], WEIGHT=cdf$WEIGHT)
cdf.w.tax
cdf.w.tax$OTU1 <- as.character(cdf.w.tax$OTU1)
cdf.w.tax$OTU2 <- as.character(cdf.w.tax$OTU2)
str(cdf.w.tax)
cdf.w.tax[is.na(cdf.w.tax)] <- "unidentified"
circos.clear()
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
circos.clear()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
pdf("Figures/DOE.Biocrust Fungal-Bacteria Community Network Analysis (Surface top 100 OTUs-cross only).pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Fungal-Bacterial Community Network Analysis (Subsurface top 100 OTUs-cross domain only)")
circos.clear()
dev.off()
