physeq.prune.rarefy.plot.richness.Site_layer = plot_richness(physeq.prune.rarefy.SF, x="Site", color=("Site"), measures=c("Observed")) + geom_boxplot(lwd=1,fill=c("#999999", "gold2", "cadetblue3", "palegreen2")) + ggtitle("Bacterial Alpha Diversity by Site") + stat_compare_means(method = "anova", label.y = 1222) + theme(plot.title = element_text(hjust = 0.5)) + scale_colour_manual(values = c("#000000", "#E69F00", "#56B4E9", "#009E73")) + geom_text(data=LABELS, aes(x=LABELS$Site, y = 1150, label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Site_layer
physeq.prune.rarefy.plot.richness.Site_layer = plot_richness(physeq.prune.rarefy.SF, x="Site", color=("Site"), measures=c("Observed")) + geom_boxplot(lwd=1,fill=c("#999999", "gold2", "cadetblue3", "palegreen2")) + ggtitle("Bacterial Alpha Diversity by Site") + stat_compare_means(method = "anova", label.y = 500) + theme(plot.title = element_text(hjust = 0.5)) + scale_colour_manual(values = c("#000000", "#E69F00", "#56B4E9", "#009E73")) + geom_text(data=LABELS, aes(x=LABELS$Site, y = 500, label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Site_layer
physeq.prune.rarefy.plot.richness.Site_layer = plot_richness(physeq.prune.rarefy.SF, x="Site", color=("Site"), measures=c("Observed")) + geom_boxplot(lwd=1,fill=c("#999999", "gold2", "cadetblue3", "palegreen2")) + ggtitle("Bacterial Alpha Diversity by Site") + stat_compare_means(method = "anova", label.y = 510) + theme(plot.title = element_text(hjust = 0.5)) + scale_colour_manual(values = c("#000000", "#E69F00", "#56B4E9", "#009E73")) + geom_text(data=LABELS, aes(x=LABELS$Site, y = 500, label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Site_layer
physeq.prune.rarefy.plot.richness.Site_layer = plot_richness(physeq.prune.rarefy.SF, x="Site", color=("Site"), measures=c("Observed")) + geom_boxplot(lwd=1,fill=c("#999999", "gold2", "cadetblue3", "palegreen2")) + ggtitle("Bacterial Alpha Diversity by Site") + stat_compare_means(method = "anova", label.y = 520) + theme(plot.title = element_text(hjust = 0.5)) + scale_colour_manual(values = c("#000000", "#E69F00", "#56B4E9", "#009E73")) + geom_text(data=LABELS, aes(x=LABELS$Site, y = 500, label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Site_layer
pdf("./Figures/Fungal Alpha Diversity by Site.pdf", width = 8, height = 5)
physeq.prune.rarefy.ps.plot.richness.site.layer
dev.off()
pdf("./Figures/Fungal Alpha Diversity by Site.pdf", width = 8, height = 5)
physeq.prune.rarefy.plot.richness.site.layer
pdf("./Figures/Fungal Alpha Diversity by Site.pdf", width = 8, height = 5)
physeq.prune.rarefy.plot.richness.site_layer
pdf("./Figures/Fungal Alpha Diversity by Site.pdf", width = 8, height = 5)
physeq.prune.rarefy.plot.richness.Site_layer
dev.off()
physeq.prune.rarefy.plot.richness.Site_layer = plot_richness(physeq.prune.rarefy.SF, x="Site", color=("Site"), measures=c("Observed")) + geom_boxplot(lwd=1,fill=c("#999999", "gold2", "cadetblue3", "palegreen2")) + ggtitle("Fungal Alpha Diversity by Site") + stat_compare_means(method = "anova", label.y = 520) + theme(plot.title = element_text(hjust = 0.5)) + scale_colour_manual(values = c("#000000", "#E69F00", "#56B4E9", "#009E73")) + geom_text(data=LABELS, aes(x=LABELS$Site, y = 500, label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Site_layer
pdf("./Figures/Fungal Alpha Diversity by Site.pdf", width = 8, height = 5)
physeq.prune.rarefy.plot.richness.Site_layer
dev.off()
taxcom_site = ggplot(data = psmelt(physeq.prune.rarefy.SF), mapping = aes_string(x = "Site" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Fungal Taxonomic Composition by Site")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
#print(taxcom_sitelayer)
pdf("./Figures/Fungal Taxonomic Composition by Site.pdf", width = 10, height = 6 )
taxcom_site
dev.off()
taxcom_site = ggplot(data = psmelt(physeq.prune.rarefy.SF), mapping = aes_string(x = "Site" ,y = "Abundance", fill = "Class" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Fungal Taxonomic Composition by Site")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
#print(taxcom_sitelayer)
pdf("./Figures/Fungal Taxonomic Composition by Site.pdf", width = 10, height = 6 )
taxcom_site
dev.off()
FungiClass = as.character(get_taxa_unique(physeq.prune.rarefy.SF, "Class"))
FungiClass = FungiClass[complete.cases(FungiClass)]
pdf("./Figures/Fungal Class Alpha Diversity Observed by Site PLPA250.pdf", width = 8, height = 5 )
for (i in FungiClass) {
APS = subset_taxa(physeq.prune.rarefy, Class == i)
APS.plot = plot_richness(APS, x="Site", color =("Site"), measures=c("Observed")) + geom_boxplot(lwd=1,fill=c("#999999", "gold2", "cadetblue3", "palegreen2")) + ggtitle(i) + stat_compare_means(method = "anova") + theme(plot.title = element_text(hjust = 0.5)) + scale_colour_manual(values = c("#000000", "#E69F00", "#56B4E9", "#009E73"))
print(APS.plot)
}
pdf("./Figures/Fungal Class Alpha Diversity Observed by Site PLPA250.pdf", width = 8, height = 5 )
for (i in FungiClass) {
APS = subset_taxa(physeq.prune.rarefy.SF, Class == i)
APS.plot = plot_richness(APS, x="Site", color =("Site"), measures=c("Observed")) + geom_boxplot(lwd=1,fill=c("#999999", "gold2", "cadetblue3", "palegreen2")) + ggtitle(i) + stat_compare_means(method = "anova") + theme(plot.title = element_text(hjust = 0.5)) + scale_colour_manual(values = c("#000000", "#E69F00", "#56B4E9", "#009E73"))
print(APS.plot)
}
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(vegan)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(data.table)
library(tidyr)
library(tidyverse)
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",header=TRUE,row.names=1,sep="\t",stringsAsFactors=FALSE)
sampleData <- sample_data(meta)
otus <- read.table("MC2018FC.otu_table.txt",header=T,sep="\t",row.names=1)
otumat <- as(as.matrix(otus), "matrix")
OTU = otu_table(otumat, taxa_are_rows = TRUE)
taxmat <- read.table("MC2018FC.taxonomy.fix.txt", header=T,sep="\t",row.names=1)
taxmat <- as(as.matrix(taxmat),"matrix")
TAX = tax_table(taxmat)
treefile = "MC2018FC.tree.phy"
tree = read.tree(treefile)
physeq = phyloseq(OTU,TAX,sampleData,tree)
physeq
physeq.prune = prune_taxa(taxa_sums(physeq) > 1, physeq)
physeq.prune
readcount = data.table(as(sample_data(physeq.prune), "data.frame"),
TotalReads = sample_sums(physeq.prune),
keep.rownames = TRUE)
setnames(readcount, "rn", "SampleID")
#For plotting, use command below.
#SeqDepth = ggplot(readcount, aes(TotalReads)) + geom_histogram() + ggtitle("Sequencing Depth")
readcount = readcount[order(readcount$TotalReads), c("SampleID", "TotalReads")]
head(readcount)
set.seed(1)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 6842, replace = FALSE, trimOTUs = FALSE)
physeq.prune.rarefy
physeq.prune.rarefy.SF = subset_samples(physeq.prune, Layer=="Surface")
sample_data(physeq.prune.rarefy.SF)$Site = factor(sample_data(physeq.prune.rarefy.SF)$Site, levels = c("LAC","CLC", "GLC", "RMC", "SMC"))
physeq.prune.rarefy.SF = subset_samples(physeq.prune, Layer=="Surface")
sample_data(physeq.prune.rarefy.SF)$Crust_type = factor(sample_data(physeq.prune.rarefy.SF)$Crust_type, levels = c("LAC","CLC", "GLC", "RMC", "SMC"))
alpha.diversity = estimate_richness(physeq.prune.rarefy.SF, measures = c("Observed"))
data.anova = cbind(sample_data(physeq.prune.rarefy.SF), alpha.diversity)
physeq.prune.rarefy.SF.anova = aov(Observed ~ Crust_type, data.anova)
summary(physeq.prune.rarefy.SF.anova)
tukey.ps.SF = TukeyHSD(x=physeq.prune.rarefy.SF.anova, 'Crust_type', conf.level = 0.95)
generate_label_df <- function(tukey.ps.SF, variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- tukey.ps.SF[[variable]][,4]
Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]
return(Tukey.labels)
}
LABELS=generate_label_df(tukey.ps.SF, 'Site')
library(multcompView)
LABELS=generate_label_df(tukey.ps.SF, 'Site')
LABELS=generate_label_df(tukey.ps.SF, 'Crust_type')
names(LABELS) = c('Letters','Crust_type')
physeq.prune.rarefy.plot.richness.Crust_type = plot_richness(physeq.prune.rarefy.SF, x="Crust_type", color=("Crust_type"), measures=c("Observed")) + geom_boxplot(lwd=1,fill=c("#999999", "gold2", "cadetblue3", "palegreen2", "lightpink")) + ggtitle("Fungal Alpha Diversity by Crust_type") + stat_compare_means(method = "anova", label.y = 520) + theme(plot.title = element_text(hjust = 0.5)) + scale_colour_manual(values = c("#000000", "#E69F00", "#56B4E9", "#009E73", "#CC79A7")) + geom_text(data=LABELS, aes(x=LABELS$Crust_type, y = 500, label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Crust_type
pdf("./Figures/Fungal Alpha Diversity (Observed) by Crust_type.pdf", width = 8, height = 5)
physeq.prune.rarefy.plot.richness.Crust_type
dev.off()
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(vegan)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(data.table)
library(tidyr)
library(tidyverse)
fast_melt = function(physeq){
# supports "naked" otu_table as `physeq` input.
otutab = as(otu_table(physeq), "matrix")
if(!taxa_are_rows(physeq)){otutab <- t(otutab)}
otudt = data.table(otutab, keep.rownames = TRUE)
setnames(otudt, "rn", "taxaID")
# Enforce character taxaID key
otudt[, taxaIDchar := as.character(taxaID)]
otudt[, taxaID := NULL]
setnames(otudt, "taxaIDchar", "taxaID")
# Melt count table
mdt = melt.data.table(otudt,
id.vars = "taxaID",
variable.name = "SampleID",
value.name = "count")
# Remove zeroes, NAs
mdt <- mdt[count > 0][!is.na(count)]
# Calculate relative abundance
mdt[, RelativeAbundance := count / sum(count), by = SampleID]
if(!is.null(tax_table(physeq, errorIfNULL = FALSE))){
# If there is a tax_table, join with it. Otherwise, skip this join.
taxdt = data.table(as(tax_table(physeq, errorIfNULL = TRUE), "matrix"), keep.rownames = TRUE)
setnames(taxdt, "rn", "taxaID")
# Enforce character taxaID key
taxdt[, taxaIDchar := as.character(taxaID)]
taxdt[, taxaID := NULL]
setnames(taxdt, "taxaIDchar", "taxaID")
# Join with tax table
setkey(taxdt, "taxaID")
setkey(mdt, "taxaID")
mdt <- taxdt[mdt]
}
return(mdt)
}
summarize_taxa = function(physeq, Rank, GroupBy = NULL){
Rank <- Rank[1]
if(!Rank %in% rank_names(physeq)){
message("The argument to `Rank` was:\n", Rank,
"\nBut it was not found among taxonomic ranks:\n",
paste0(rank_names(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
if(!is.null(GroupBy)){
GroupBy <- GroupBy[1]
if(!GroupBy %in% sample_variables(physeq)){
message("The argument to `GroupBy` was:\n", GroupBy,
"\nBut it was not found among sample variables:\n",
paste0(sample_variables(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
}
# Start with fast melt
mdt = fast_melt(physeq)
if(!is.null(GroupBy)){
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(physeq),
var1 = get_variable(physeq, GroupBy))
setnames(sdt, "var1", GroupBy)
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
}
# Summarize
Nsamples = nsamples(physeq)
summarydt = mdt[, list(meanRA = sum(RelativeAbundance)/Nsamples,
sdRA = sd(RelativeAbundance),
minRA = min(RelativeAbundance),
maxRA = max(RelativeAbundance)),
by = c(Rank, GroupBy)]
return(summarydt)
}
plot_taxa_summary = function(physeq, Rank, GroupBy = NULL){
# Get taxa summary table
dt1 = summarize_taxa(physeq, Rank = Rank, GroupBy = GroupBy)
# Set factor appropriately for plotting
RankCol = which(colnames(dt1) == Rank)
setorder(dt1, -meanRA)
dt1[, RankFac := factor(dt1[[Rank]],
levels = rev(dt1[[Rank]]))]
dt1[, ebarMax := max(c(0, min(meanRA + sdRA))), by = eval(Rank)]
dt1[, ebarMin := max(c(0, min(meanRA - sdRA))), by = eval(Rank)]
# Set zeroes to one-tenth the smallest value
ebarMinFloor = dt1[(ebarMin > 0), min(ebarMin)]
ebarMinFloor <- ebarMinFloor / 10
dt1[(ebarMin == 0), ebarMin := ebarMinFloor]
pRank = ggplot(dt1, aes(x = meanRA, y = RankFac)) +
scale_x_log10() +
xlab("Mean Relative Abundance") +
ylab(Rank) +
theme_bw()
if(!is.null(GroupBy)){
# pRank <- pRank + facet_wrap(facets = as.formula(paste("~", GroupBy)))
pRank <- pRank + geom_point(mapping = aes_string(colour = GroupBy),
size = 5)
} else {
# Don't include error bars for faceted version
pRank <- pRank + geom_errorbarh(aes(xmax = ebarMax,
xmin = ebarMin))
}
return(pRank)
}
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",header=TRUE,row.names=1,sep="\t",stringsAsFactors=FALSE)
sampleData <- sample_data(meta)
otus <- read.table("MC2018FC.otu_table.txt",header=T,sep="\t",row.names=1)
otumat <- as(as.matrix(otus), "matrix")
OTU = otu_table(otumat, taxa_are_rows = TRUE)
taxmat <- read.table("MC2018FC.taxonomy.fix.txt", header=T,sep="\t",row.names=1)
taxmat <- as(as.matrix(taxmat),"matrix")
TAX = tax_table(taxmat)
treefile = "MC2018FC.tree.phy"
tree = read.tree(treefile)
physeq = phyloseq(OTU,TAX,sampleData,tree)
physeq
physeq.prune = prune_taxa(taxa_sums(physeq) > 1, physeq)
physeq.prune
readcount = data.table(as(sample_data(physeq.prune), "data.frame"),
TotalReads = sample_sums(physeq.prune),
keep.rownames = TRUE)
setnames(readcount, "rn", "SampleID")
#For plotting, use command below.
#SeqDepth = ggplot(readcount, aes(TotalReads)) + geom_histogram() + ggtitle("Sequencing Depth")
readcount = readcount[order(readcount$TotalReads), c("SampleID", "TotalReads")]
head(readcount)
set.seed(1)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 6842, replace = FALSE, trimOTUs = FALSE)
physeq.prune.rarefy
alpha.diversity = estimate_richness(physeq.prune.rarefy, measures = c("Observed"))
data.anova = cbind(sample_data(physeq.prune.rarefy), alpha.diversity)
physeq.prune.rarefy.anova = aov(Observed ~ Site_layer, data.anova)
summary(physeq.prune.rarefy.anova)
tukey.ps = TukeyHSD(x=physeq.prune.rarefy.anova, 'Site_layer', conf.level = 0.95)
generate_label_df <- function(tukey.ps, variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- tukey.ps[[variable]][,4]
Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]
return(Tukey.labels)
}
tukey.ps = TukeyHSD(x=physeq.prune.rarefy.anova, 'Site_layer', conf.level = 0.95)
generate_label_df <- function(tukey.ps, variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- tukey.ps[[variable]][,4]
Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]
return(Tukey.labels)
}
LABELS=generate_label_df(tukey.ps, 'Site_layer')
library(multcompView)
LABELS=generate_label_df(tukey.ps, 'Site_layer')
names(LABELS) = c('Letters','Site_layer')
sample_data(physeq.prune.rarefy)$Site_layer = factor(sample_data(physeq.prune.rarefy)$Site_layer, levels = c("JTNP_SF","CIMA_SF", "GMT_SF", "KELSO_SF", "JTNP_Sub","CIMA_Sub", "GMT_Sub", "KELSO_Sub"))
alpha.diversity = estimate_richness(physeq.prune.rarefy, measures = c("Observed"))
data.anova = cbind(sample_data(physeq.prune.rarefy), alpha.diversity)
physeq.prune.rarefy.anova = aov(Observed ~ Site_layer, data.anova)
summary(physeq.prune.rarefy.anova)
tukey.ps = TukeyHSD(x=physeq.prune.rarefy.anova, 'Site_layer', conf.level = 0.95)
generate_label_df <- function(tukey.ps, variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- tukey.ps[[variable]][,4]
Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]
return(Tukey.labels)
}
LABELS=generate_label_df(tukey.ps, 'Site_layer')
names(LABELS) = c('Letters','Site_layer')
ylabel <- data.frame("ylabel" = c(1150,2650,1200,2050,1000,1650,1100,2500))
LABELS$ylabel<-ylabel$ylabel
physeq.prune.rarefy.ps.plot.richness.site.layer = plot_richness(physeq.prune.rarefy, x="Site_layer", color=("Site_layer"), measures=c("Observed")) + geom_boxplot() + ggtitle("Mojave Biocrust Fungal Alpha Diversity by Site and Layer") + stat_compare_means(method = "anova", label.y = 400) + theme(plot.title = element_text(hjust = 0.5)) + geom_text(data=LABELS, aes(x=LABELS$Site, y = LABELS$ylabel, label = LABELS$Letters))
physeq.prune.rarefy.ps.plot.richness.site.layer
ylabel <- data.frame("ylabel" = c(240,280,230,340,210,290,205,320))
LABELS$ylabel<-ylabel$ylabel
physeq.prune.rarefy.ps.plot.richness.site.layer = plot_richness(physeq.prune.rarefy, x="Site_layer", color=("Site_layer"), measures=c("Observed")) + geom_boxplot() + ggtitle("Mojave Biocrust Fungal Alpha Diversity by Site and Layer") + stat_compare_means(method = "anova", label.y = 400) + theme(plot.title = element_text(hjust = 0.5)) + geom_text(data=LABELS, aes(x=LABELS$Site, y = LABELS$ylabel, label = LABELS$Letters))
physeq.prune.rarefy.ps.plot.richness.site.layer
ylabel <- data.frame("ylabel" = c(245,280,235,345,215,290,210,320))
LABELS$ylabel<-ylabel$ylabel
physeq.prune.rarefy.ps.plot.richness.site.layer = plot_richness(physeq.prune.rarefy, x="Site_layer", color=("Site_layer"), measures=c("Observed")) + geom_boxplot() + ggtitle("Mojave Biocrust Fungal Alpha Diversity by Site and Layer") + stat_compare_means(method = "anova", label.y = 400) + theme(plot.title = element_text(hjust = 0.5)) + geom_text(data=LABELS, aes(x=LABELS$Site, y = LABELS$ylabel, label = LABELS$Letters))
physeq.prune.rarefy.ps.plot.richness.site.layer
ylabel <- data.frame("ylabel" = c(245,280,235,345,215,295,210,320))
LABELS$ylabel<-ylabel$ylabel
physeq.prune.rarefy.ps.plot.richness.site.layer = plot_richness(physeq.prune.rarefy, x="Site_layer", color=("Site_layer"), measures=c("Observed")) + geom_boxplot() + ggtitle("Mojave Biocrust Fungal Alpha Diversity by Site and Layer") + stat_compare_means(method = "anova", label.y = 400) + theme(plot.title = element_text(hjust = 0.5)) + geom_text(data=LABELS, aes(x=LABELS$Site, y = LABELS$ylabel, label = LABELS$Letters))
physeq.prune.rarefy.ps.plot.richness.site.layer
physeq.prune.rarefy.ps.plot.richness.site.layer = plot_richness(physeq.prune.rarefy, x="Site_layer", color=("Site_layer"), measures=c("Observed")) + geom_boxplot() + ggtitle("Mojave Biocrust Fungal Alpha Diversity by Site and Layer") + stat_compare_means(method = "anova", label.y = 350) + theme(plot.title = element_text(hjust = 0.5)) + geom_text(data=LABELS, aes(x=LABELS$Site, y = LABELS$ylabel, label = LABELS$Letters))
physeq.prune.rarefy.ps.plot.richness.site.layer
pdf("./Figures/Mojave Biocrust Fungal Alpha Diversity by Site and Layer.pdf", width = 8, height = 5)
physeq.prune.rarefy.ps.plot.richness.site.layer
dev.off()
#physeq.prune.rarefy.SF = subset_samples(physeq.prune, Layer=="Surface")
#sample_data(physeq.prune.rarefy.SF)$Crust_type = factor(sample_data(physeq.prune.rarefy.SF)$Crust_type, levels = c("LAC","CLC", "GLC", "RMC", "SMC"))
sample_data(physeq.prune.rarefy)$Crust_type = factor(sample_data(physeq.prune.rarefy)$Crust_type, levels = c("LAC","CLC", "GLC", "RMC", "SMC","LAC.Sub","CLC.Sub", "GLC.Sub", "RMC.Sub", "SMC.Sub"))
alpha.diversity = estimate_richness(physeq.prune.rarefy, measures = c("Observed"))
data.anova = cbind(sample_data(physeq.prune.rarefy), alpha.diversity)
physeq.prune.rarefy.anova = aov(Observed ~ Crust_type, data.anova)
summary(physeq.prune.rarefy.anova)
tukey.ps = TukeyHSD(x=physeq.prune.rarefy.anova, 'Crust_type', conf.level = 0.95)
tukey.ps = TukeyHSD(x=physeq.prune.rarefy.anova, 'Crust_type', conf.level = 0.95)
LABELS=generate_label_df(tukey.ps.SF, 'Crust_type')
LABELS=generate_label_df(tukey.ps, 'Crust_type')
names(LABELS) = c('Letters','Crust_type')
ylabel <- data.frame("ylabel" = c(219,320,90,210,225,345,235,300,235,200))
LABELS$ylabel<-ylabel$ylabel
physeq.prune.rarefy.plot.richness.Crust_type = plot_richness(physeq.prune.rarefy, x="Crust_type", color=("Crust_type"), measures=c("Observed")) + geom_boxplot() + ggtitle("Mojave Biocrust Fungall Alpha Diversity by Crust type and Layer") + stat_compare_means(method = "anova", label.y = 2800) + theme(plot.title = element_text(hjust = 0.5)) + geom_text(data=LABELS, aes(x=LABELS$Crust_type, y = LABELS$ylabel , label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Crust_type
physeq.prune.rarefy.plot.richness.Crust_type = plot_richness(physeq.prune.rarefy, x="Crust_type", color=("Crust_type"), measures=c("Observed")) + geom_boxplot() + ggtitle("Mojave Biocrust Fungall Alpha Diversity by Crust type and Layer") + stat_compare_means(method = "anova", label.y = 380) + theme(plot.title = element_text(hjust = 0.5)) + geom_text(data=LABELS, aes(x=LABELS$Crust_type, y = LABELS$ylabel , label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Crust_type
ylabel <- data.frame("ylabel" = c(219,320,90,215,225,345,235,300,235,200))
LABELS$ylabel<-ylabel$ylabel
physeq.prune.rarefy.plot.richness.Crust_type = plot_richness(physeq.prune.rarefy, x="Crust_type", color=("Crust_type"), measures=c("Observed")) + geom_boxplot() + ggtitle("Mojave Biocrust Fungall Alpha Diversity by Crust type and Layer") + stat_compare_means(method = "anova", label.y = 380) + theme(plot.title = element_text(hjust = 0.5)) + geom_text(data=LABELS, aes(x=LABELS$Crust_type, y = LABELS$ylabel , label = LABELS$Letters))
physeq.prune.rarefy.plot.richness.Crust_type
pdf("./Figures/Mojave Biocrust Fungall Alpha Diversity by Crust type and Layer.pdf", width = 8, height = 5)
physeq.prune.rarefy.plot.richness.Crust_type
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(vegan)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(data.table)
library(tidyr)
library(tidyverse)
library(multcompView)
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",header=TRUE,row.names=1,sep="\t",stringsAsFactors=FALSE)
sampleData <- sample_data(meta)
otus <- read.table("MC2018FC.otu_table.txt",header=T,sep="\t",row.names=1)
otumat <- as(as.matrix(otus), "matrix")
OTU = otu_table(otumat, taxa_are_rows = TRUE)
taxmat <- read.table("MC2018FC.taxonomy.fix.txt", header=T,sep="\t",row.names=1)
taxmat <- as(as.matrix(taxmat),"matrix")
TAX = tax_table(taxmat)
treefile = "MC2018FC.tree.phy"
tree = read.tree(treefile)
physeq = phyloseq(OTU,TAX,sampleData,tree)
physeq
physeq.prune = prune_taxa(taxa_sums(physeq) > 1, physeq)
physeq.prune
physeq.prune
readcount = data.table(as(sample_data(physeq.prune), "data.frame"),
TotalReads = sample_sums(physeq.prune),
keep.rownames = TRUE)
setnames(readcount, "rn", "SampleID")
#For plotting, use command below.
#SeqDepth = ggplot(readcount, aes(TotalReads)) + geom_histogram() + ggtitle("Sequencing Depth")
readcount = readcount[order(readcount$TotalReads), c("SampleID", "TotalReads")]
head(readcount)
set.seed(1)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 6842, replace = FALSE, trimOTUs = FALSE)
physeq.prune.rarefy
knitr::opts_chunk$set(echo = TRUE)
venn_diagram2 <- function(a, b, name_a = "A", name_b = "B", colors =  c("#e41a1c","#377eb8"), out = FALSE, file_name = "default.pdf", euler = FALSE, main = "main"){
# Niels Hanson
# https://github.com/hallamlab/mp_tutorial/blob/master/downstream_analysis_r/code/venn_diagram2.r
# Info: A function to create a venn digagram between three (3) overapping sets a, b, and c.
# Requies: The VennDiagram R package, the program will try to download and install if you dont
#          have it.
# Inputs: a,b,c - vertical vectors or the first column of matrixes as sets of strings to be compared
#         name_a, name_b, and name_c - names that you give to sets a, b, and c, respectively
#         these will appear in the final image
#         colors - a vector of colors defined in hex format ie. colors <- c("#B80830","#EACC33","#46E2D9")
#         it might be a good idea that these mix well as the interlapping classes will be a mix of colors
#         Colors must be specified in hex ie. "#123456", google "hex colors" for more info
#         name_output - the name of the output image that will be put in R's current working directory
#         you can set this yourself before running. ie. setwd("~/my-director/")
# A: find all classes for set a, a_b, a_c, a_b_c
# number in a, we will use this at the end for a sanity check
# make sure that a,b,c are all sets, get rid of duplicates
a <- intersect(a,a)
b <- intersect(b,b)
# length of a
a_tot <- length(a)
# length of b
b_tot <- length(b)
# number shared between a and b and c
a_b <- intersect(a,b)
a_b_tot <- length(a_b)
a_b_tot
a_only <- setdiff(a,b)
a_only_tot <- length(a_only)
b_only <- setdiff(b,a)
b_only_tot <- length(b_only)
# try to load VennDiagram else try to download it
# More info: see Hanbo Chen and Paul C Boutros. BMC Bioinformatics 2011, 12:35 doi:10.1186/1471-2105-12-35
try(library(VennDiagram), install.packages("VennDiagram"))
library(VennDiagram)
# create the venn diagram and output into the current working directory
temp <- list(
name_a = c(1:length(a)),
name_b = c((length(a_only)+1):((length(a_only))+length(b)))
)
names(temp) <- c(name_a,name_b)
output <- venn.diagram(
x = temp,
filename = NULL,
col = "grey28",
fill = c(colors[1], colors[2]),
alpha = 0.58,
label.col = c("grey28"),
cex = 2.5,
fontface = "bold",
fontfamily = "sans",
cat.default.pos = "text",
cat.col = c("grey28"),
cat.cex = 2.5,
cat.fontfamily = "sans",
cat.dist = c(0.06, 0.06),
cat.pos = c(-20, 14),
euler.d = euler,
scaled = euler,
main = main,
main.fontface = "bold",
main.fontfamily = "sans"
);
try(library("grid"), install.packages("grid"))
library(grid)
if (out == TRUE) {
# only produce ouptut files upon request
png(filename = paste(file_name,'.png', sep=''))
grid.draw(output)
dev.off()
pdf(file = paste(file_name,'.pdf', sep=''), width=8, height=8)
grid.draw(output)
dev.off()
} else {
# just plot the figure
grid.draw(output)
}
# pack all the sets up and return to the user
out <- NULL;
a <- c(out, name_a, as.vector(a))
a_only <-  as.vector(a_only)
a_b <- as.vector(a_b)
b <- c(out,name_b,as.vector(b))
b_only <- c(out,paste(name_b,"only",sep="_"),as.vector(b_only))
out <- list(a,a_only,a_b,b,b_only)
names(out) <- c(name_a,
paste(name_a,"only",sep="_"),
paste(name_a,name_b,sep="_"),
name_b,
paste(name_b,"only",sep="_"))
return(out)
}
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Rhizaria")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Chromista")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Unassigned")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "NA")
physeq.prune.rarefy
physeq.prune.rarefy.SF = subset_samples(physeq.prune.rarefy, Layer=="Surface")
physeq.prune.rarefy.SF = prune_taxa(taxa_sums(physeq.prune.rarefy.SF) > 1, physeq.prune.rarefy.SF)
physeq.prune.rarefy.SF
physeq.prune.rarefy.SUB = subset_samples(physeq.prune.rarefy, Layer=="Subsurface")
physeq.prune.rarefy.SUB = prune_taxa(taxa_sums(physeq.prune.rarefy.SUB) > 1, physeq.prune.rarefy.SUB)
physeq.prune.rarefy.SUB
OTU.name.physeq.prune.rarefy.SF = rownames((otu_table(physeq.prune.rarefy.SF)))
OTU.name.physeq.prune.rarefy.SUB = rownames((otu_table(physeq.prune.rarefy.SUB)))
## plot venn diagrams
# Surface vs Subsurface
pdf("./Figures/Fungal_Surface_Subsurface_venn.pdf", width = 8, height = 8)
ven_test = venn_diagram2(OTU.name.physeq.prune.rarefy.SF, OTU.name.physeq.prune.rarefy.SUB, "Surface", "Subsurface", colors= c("#009E73", "#CC79A7"), euler=TRUE, main = "Fungal Surface-Subsurface Venn")
dev.off()
