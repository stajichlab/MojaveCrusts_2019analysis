LABELS=generate_label_df(tukey.ps.SF, 'Crust_type')
names(LABELS) = c('Letters','Crust_type')
APS.plot = plot_richness(APS, x="Crust_type", color =("Crust_type"), measures=c("Observed")) + geom_boxplot(lwd=0.5) + ggtitle(i) + stat_compare_means(method = "anova") + theme(plot.title = element_text(hjust = 0.5)) + theme_bw() + scale_colour_brewer(palette="Set1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + geom_text(data=LABELS, aes(x=LABELS$Site, label = LABELS$Letters))
print(APS.plot)
}
pdf("./Figures/Bacterial_Phylum_Alpha_(Observed)_Diversity_by_Crust_type_surface_only.pdf", width = 6, height = 3.8 )
for (i in BacPhylum) {
APS = subset_taxa(physeq.prune.rarefy.SF, Phylum == i)
APS.alpha = estimate_richness(APS, measures = c("Observed"))
data.anova = cbind(sample_data(APS), APS.alpha)
APS.anova = aov(Observed ~ Crust_type, data.anova)
tukey.ps.SF = TukeyHSD(x=APS.anova, 'Crust_type', conf.level = 0.95)
LABELS=generate_label_df(tukey.ps.SF, 'Crust_type')
names(LABELS) = c('Letters','Crust_type')
APS.plot = plot_richness(APS, x="Crust_type", color =("Crust_type"), measures=c("Observed")) + geom_boxplot(lwd=0.5) + ggtitle(i) + stat_compare_means(method = "anova") + theme(plot.title = element_text(hjust = 0.5)) + theme_bw() + scale_colour_brewer(palette="Set1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + geom_text(data=LABELS, aes(x=LABELS$Site, y = 200, label = LABELS$Letters))
print(APS.plot)
}
pdf("./Figures/Bacterial_Phylum_Alpha_(Observed)_Diversity_by_Crust_type_surface_only.pdf", width = 6, height = 3.8 )
for (i in BacPhylum) {
APS = subset_taxa(physeq.prune.rarefy.SF, Phylum == i)
APS.plot = plot_richness(APS, x="Crust_type", color =("Crust_type"), measures=c("Observed")) + geom_boxplot(lwd=0.5) + ggtitle(i) + stat_compare_means(method = "anova") + theme(plot.title = element_text(hjust = 0.5)) + theme_bw() + scale_colour_brewer(palette="Set1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(APS.plot)
}
dev.off()
pdf("./Figures/Bacterial_Phylum_Alpha_(Observed)_Diversity_by_Layer.pdf", width = 6, height = 3.8)
for (i in BacPhylum.all) {
APS = subset_taxa(physeq.prune.rarefy, Phylum == i)
APS.plot = plot_richness(APS, x="Layer", color =("Layer"), measures=c("Observed")) + geom_boxplot(lwd=0.5) + ggtitle(i) + stat_compare_means(method = "t.test") + theme(plot.title = element_text(hjust = 0.5)) + theme_bw() + scale_colour_brewer(palette="Set1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(APS.plot)
}
dev.off()
pdf("./Figures/Bacterial_Phylum_Alpha_(Observed)_Diversity_by_Site_surface_only.pdf", width = 6, height = 3.8)
for (i in BacPhylum) {
APS = subset_taxa(physeq.prune.rarefy.SF, Phylum == i)
APS.plot = plot_richness(APS, x="Site", color =("Site"), measures=c("Observed")) + geom_boxplot(lwd=0.5) + ggtitle(i) + stat_compare_means(method = "anova") + theme(plot.title = element_text(hjust = 0.5)) + theme_bw() + scale_colour_brewer(palette="Set1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(APS.plot)
}
dev.off()
pdf("./Figures/Bacterial_Phylum_Alpha_(Observed)_Diversity_by_Site_surface_only.pdf", width = 6, height = 3.8)
for (i in BacPhylum) {
APS = subset_taxa(physeq.prune.rarefy.SF, Phylum == i)
APS.plot = plot_richness(APS, x="Site", color =("Site"), measures=c("Observed")) + geom_boxplot(lwd=0.5) + ggtitle(i) + stat_compare_means(method = "anova") + theme(plot.title = element_text(hjust = 0.5)) + theme_bw() + scale_colour_brewer(palette="Set1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(APS.plot)
}
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(vegan)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(data.table)
library(tidyr)
library(tidyverse)
library(multcompView)
library(VennDiagram)
fast_melt = function(physeq){
# supports "naked" otu_table as `physeq` input.
otutab = as(otu_table(physeq), "matrix")
if(!taxa_are_rows(physeq)){otutab <- t(otutab)}
otudt = data.table(otutab, keep.rownames = TRUE)
setnames(otudt, "rn", "taxaID")
# Enforce character taxaID key
otudt[, taxaIDchar := as.character(taxaID)]
otudt[, taxaID := NULL]
setnames(otudt, "taxaIDchar", "taxaID")
# Melt count table
mdt = melt.data.table(otudt,
id.vars = "taxaID",
variable.name = "SampleID",
value.name = "count")
# Remove zeroes, NAs
mdt <- mdt[count > 0][!is.na(count)]
# Calculate relative abundance
mdt[, RelativeAbundance := count / sum(count), by = SampleID]
if(!is.null(tax_table(physeq, errorIfNULL = FALSE))){
# If there is a tax_table, join with it. Otherwise, skip this join.
taxdt = data.table(as(tax_table(physeq, errorIfNULL = TRUE), "matrix"), keep.rownames = TRUE)
setnames(taxdt, "rn", "taxaID")
# Enforce character taxaID key
taxdt[, taxaIDchar := as.character(taxaID)]
taxdt[, taxaID := NULL]
setnames(taxdt, "taxaIDchar", "taxaID")
# Join with tax table
setkey(taxdt, "taxaID")
setkey(mdt, "taxaID")
mdt <- taxdt[mdt]
}
return(mdt)
}
summarize_taxa = function(physeq, Rank, GroupBy = NULL){
Rank <- Rank[1]
if(!Rank %in% rank_names(physeq)){
message("The argument to `Rank` was:\n", Rank,
"\nBut it was not found among taxonomic ranks:\n",
paste0(rank_names(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
if(!is.null(GroupBy)){
GroupBy <- GroupBy[1]
if(!GroupBy %in% sample_variables(physeq)){
message("The argument to `GroupBy` was:\n", GroupBy,
"\nBut it was not found among sample variables:\n",
paste0(sample_variables(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
}
# Start with fast melt
mdt = fast_melt(physeq)
if(!is.null(GroupBy)){
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(physeq),
var1 = get_variable(physeq, GroupBy))
setnames(sdt, "var1", GroupBy)
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
}
# Summarize
Nsamples = nsamples(physeq)
summarydt = mdt[, list(meanRA = sum(RelativeAbundance)/Nsamples,
sdRA = sd(RelativeAbundance),
minRA = min(RelativeAbundance),
maxRA = max(RelativeAbundance)),
by = c(Rank, GroupBy)]
return(summarydt)
}
plot_taxa_summary = function(physeq, Rank, GroupBy = NULL){
# Get taxa summary table
dt1 = summarize_taxa(physeq, Rank = Rank, GroupBy = GroupBy)
# Set factor appropriately for plotting
RankCol = which(colnames(dt1) == Rank)
setorder(dt1, -meanRA)
dt1[, RankFac := factor(dt1[[Rank]],
levels = rev(dt1[[Rank]]))]
dt1[, ebarMax := max(c(0, min(meanRA + sdRA))), by = eval(Rank)]
dt1[, ebarMin := max(c(0, min(meanRA - sdRA))), by = eval(Rank)]
# Set zeroes to one-tenth the smallest value
ebarMinFloor = dt1[(ebarMin > 0), min(ebarMin)]
ebarMinFloor <- ebarMinFloor / 10
dt1[(ebarMin == 0), ebarMin := ebarMinFloor]
pRank = ggplot(dt1, aes(x = meanRA, y = RankFac)) +
scale_x_log10() +
xlab("Mean Relative Abundance") +
ylab(Rank) +
theme_bw()
if(!is.null(GroupBy)){
# pRank <- pRank + facet_wrap(facets = as.formula(paste("~", GroupBy)))
pRank <- pRank + geom_point(mapping = aes_string(colour = GroupBy),
size = 5)
} else {
# Don't include error bars for faceted version
pRank <- pRank + geom_errorbarh(aes(xmax = ebarMax,
xmin = ebarMin))
}
return(pRank)
}
otus <- read.table("MojaveBacQ2FWLEsilva515806.otu_table.fix.txt",
header=T,sep="\t",row.names = 1)
otumat <- as(as.matrix(otus), "matrix")
OTU = otu_table(otumat, taxa_are_rows = TRUE)
taxmat <- read.csv("taxonomy_phyloseq_fix.csv",
sep=",",row.names=1)
row.names(taxmat) = taxmat$OTU.ID
taxmat <- as(as.matrix(taxmat),"matrix")
TAX = tax_table(taxmat)
treefile = "tree.nwk"
tree = read.tree(treefile)
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",
header=TRUE,row.names=1,
sep="\t",stringsAsFactors=FALSE)
#meta <- meta[which(meta$Layer %in% c("Surface")),]
head(meta)
sampleData <- sample_data(meta)
physeq = phyloseq(OTU,TAX,sampleData,tree)
physeq
physeq.prune = prune_taxa(taxa_sums(physeq) > 5, physeq)
physeq.prune
readcount = data.table(as(sample_data(physeq.prune), "data.frame"),
TotalReads = sample_sums(physeq.prune),
keep.rownames = TRUE)
setnames(readcount, "rn", "SampleID")
#For plotting, use command below.
#SeqDepth = ggplot(readcount, aes(TotalReads)) + geom_histogram() + ggtitle("Sequencing Depth")
readcount = readcount[order(readcount$TotalReads), c("SampleID", "TotalReads")]
head(readcount)
set.seed(711)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 37435, replace = FALSE, trimOTUs = TRUE)
physeq.prune.rarefy
physeq.prune.rarefy
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Rhizaria")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Chromista")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Unassigned")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
physeq.prune.rarefy
taxcom_layer = ggplot(data = psmelt(physeq.prune.rarefy), mapping = aes_string(x = "Layer" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Layer")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
set.seed(711)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 37435, replace = FALSE, trimOTUs = TRUE)
physeq.prune.rarefy
physeq.prune.rarefy
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Rhizaria")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Chromista")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
physeq.prune.rarefy
taxcom_layer = ggplot(data = psmelt(physeq.prune.rarefy), mapping = aes_string(x = "Layer" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Layer")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(taxcom_layer)
pdf("./Figures/Fig4A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Layer.pdf", width = 8, height = 5.8 )
taxcom_layer
dev.off()
physeq.prune.rarefy.SF = subset_samples(physeq.prune.rarefy, Layer=="Surface")
BacPhylum.all = as.character(get_taxa_unique(physeq.prune.rarefy, "Phylum"))
BacPhylum.all = BacPhylum.all[complete.cases(BacPhylum.all)]
BacPhylum.all
pdf("./Figures/Bacterial_Phylum_Alpha_(Observed)_Diversity_by_Layer.pdf", width = 6, height = 3.8)
for (i in BacPhylum.all) {
APS = subset_taxa(physeq.prune.rarefy, Phylum == i)
APS.plot = plot_richness(APS, x="Layer", color =("Layer"), measures=c("Observed")) + geom_boxplot(lwd=0.5) + ggtitle(i) + stat_compare_means(method = "t.test", label.x.npc = c("right")) + theme(plot.title = element_text(hjust = 0.5)) + theme_bw() + scale_colour_brewer(palette="Set1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(APS.plot)
}
dev.off()
taxcom_site = ggplot(data = psmelt(physeq.prune.rarefy.SF), mapping = aes_string(x = "Site" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Sites")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ps.glom.Phylum = tax_glom(physeq.prune.rarefy, taxrank = "Phylum")
ps.glom.Class = tax_glom(physeq.prune.rarefy, taxrank = "Class")
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(vegan)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(data.table)
library(tidyr)
library(tidyverse)
library(multcompView)
library(VennDiagram)
library(ape)
library(vegan)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(data.table)
library(tidyr)
library(tidyverse)
library(multcompView)
library(VennDiagram)
fast_melt = function(physeq){
# supports "naked" otu_table as `physeq` input.
otutab = as(otu_table(physeq), "matrix")
if(!taxa_are_rows(physeq)){otutab <- t(otutab)}
otudt = data.table(otutab, keep.rownames = TRUE)
setnames(otudt, "rn", "taxaID")
# Enforce character taxaID key
otudt[, taxaIDchar := as.character(taxaID)]
otudt[, taxaID := NULL]
setnames(otudt, "taxaIDchar", "taxaID")
# Melt count table
mdt = melt.data.table(otudt,
id.vars = "taxaID",
variable.name = "SampleID",
value.name = "count")
# Remove zeroes, NAs
mdt <- mdt[count > 0][!is.na(count)]
# Calculate relative abundance
mdt[, RelativeAbundance := count / sum(count), by = SampleID]
if(!is.null(tax_table(physeq, errorIfNULL = FALSE))){
# If there is a tax_table, join with it. Otherwise, skip this join.
taxdt = data.table(as(tax_table(physeq, errorIfNULL = TRUE), "matrix"), keep.rownames = TRUE)
setnames(taxdt, "rn", "taxaID")
# Enforce character taxaID key
taxdt[, taxaIDchar := as.character(taxaID)]
taxdt[, taxaID := NULL]
setnames(taxdt, "taxaIDchar", "taxaID")
# Join with tax table
setkey(taxdt, "taxaID")
setkey(mdt, "taxaID")
mdt <- taxdt[mdt]
}
return(mdt)
}
summarize_taxa = function(physeq, Rank, GroupBy = NULL){
Rank <- Rank[1]
if(!Rank %in% rank_names(physeq)){
message("The argument to `Rank` was:\n", Rank,
"\nBut it was not found among taxonomic ranks:\n",
paste0(rank_names(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
if(!is.null(GroupBy)){
GroupBy <- GroupBy[1]
if(!GroupBy %in% sample_variables(physeq)){
message("The argument to `GroupBy` was:\n", GroupBy,
"\nBut it was not found among sample variables:\n",
paste0(sample_variables(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
}
# Start with fast melt
mdt = fast_melt(physeq)
if(!is.null(GroupBy)){
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(physeq),
var1 = get_variable(physeq, GroupBy))
setnames(sdt, "var1", GroupBy)
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
}
# Summarize
Nsamples = nsamples(physeq)
summarydt = mdt[, list(meanRA = sum(RelativeAbundance)/Nsamples,
sdRA = sd(RelativeAbundance),
minRA = min(RelativeAbundance),
maxRA = max(RelativeAbundance)),
by = c(Rank, GroupBy)]
return(summarydt)
}
plot_taxa_summary = function(physeq, Rank, GroupBy = NULL){
# Get taxa summary table
dt1 = summarize_taxa(physeq, Rank = Rank, GroupBy = GroupBy)
# Set factor appropriately for plotting
RankCol = which(colnames(dt1) == Rank)
setorder(dt1, -meanRA)
dt1[, RankFac := factor(dt1[[Rank]],
levels = rev(dt1[[Rank]]))]
dt1[, ebarMax := max(c(0, min(meanRA + sdRA))), by = eval(Rank)]
dt1[, ebarMin := max(c(0, min(meanRA - sdRA))), by = eval(Rank)]
# Set zeroes to one-tenth the smallest value
ebarMinFloor = dt1[(ebarMin > 0), min(ebarMin)]
ebarMinFloor <- ebarMinFloor / 10
dt1[(ebarMin == 0), ebarMin := ebarMinFloor]
pRank = ggplot(dt1, aes(x = meanRA, y = RankFac)) +
scale_x_log10() +
xlab("Mean Relative Abundance") +
ylab(Rank) +
theme_bw()
if(!is.null(GroupBy)){
# pRank <- pRank + facet_wrap(facets = as.formula(paste("~", GroupBy)))
pRank <- pRank + geom_point(mapping = aes_string(colour = GroupBy),
size = 5)
} else {
# Don't include error bars for faceted version
pRank <- pRank + geom_errorbarh(aes(xmax = ebarMax,
xmin = ebarMin))
}
return(pRank)
}
otus <- read.table("MojaveBacQ2FWLEsilva515806.otu_table.fix.txt",
header=T,sep="\t",row.names = 1)
otumat <- as(as.matrix(otus), "matrix")
OTU = otu_table(otumat, taxa_are_rows = TRUE)
taxmat <- read.csv("taxonomy_phyloseq_fix.csv",
sep=",",row.names=1)
row.names(taxmat) = taxmat$OTU.ID
taxmat <- as(as.matrix(taxmat),"matrix")
TAX = tax_table(taxmat)
treefile = "tree.nwk"
tree = read.tree(treefile)
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",
header=TRUE,row.names=1,
sep="\t",stringsAsFactors=FALSE)
#meta <- meta[which(meta$Layer %in% c("Surface")),]
head(meta)
head(meta)
sampleData <- sample_data(meta)
physeq = phyloseq(OTU,TAX,sampleData,tree)
physeq
physeq.prune = prune_taxa(taxa_sums(physeq) > 5, physeq)
physeq.prune
readcount = data.table(as(sample_data(physeq.prune), "data.frame"),
TotalReads = sample_sums(physeq.prune),
keep.rownames = TRUE)
setnames(readcount, "rn", "SampleID")
#For plotting, use command below.
#SeqDepth = ggplot(readcount, aes(TotalReads)) + geom_histogram() + ggtitle("Sequencing Depth")
readcount = readcount[order(readcount$TotalReads), c("SampleID", "TotalReads")]
head(readcount)
set.seed(711)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 37435, replace = FALSE, trimOTUs = TRUE)
physeq.prune.rarefy
physeq.prune.rarefy
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Rhizaria")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Chromista")
physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
physeq.prune.rarefy
ps.glom.Class = tax_glom(physeq.prune.rarefy, taxrank = "Class")
ps.glom.Class = tax_glom(physeq.prune.rarefy, taxrank = "Genus")
physeq.prune.rarefy = prune_taxa(taxa_sums(physeq.prune.rarefy) > 5, physeq.prune.rarefy)
physeq.prune.rarefy
taxcom_layer = ggplot(data = psmelt(physeq.prune.rarefy), mapping = aes_string(x = "Layer" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Layer")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() #+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(taxcom_layer)
pdf("./Figures/Fig4A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Layer.png", width = 8, height = 5.8, res = 300 )
pdf("./Figures/Fig4A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Layer.tiff", width = 8, height = 5.8, res = 300 )
png("./Figures/Fig4A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Layer.png", units="in", width = 8, height = 5.8, res = 300 )
taxcom_layer
dev.off()
physeq.prune.rarefy.SF = subset_samples(physeq.prune.rarefy, Layer=="Surface")
physeq.prune.rarefy.SF = subset_samples(physeq.prune.rarefy, Layer=="Surface")
taxcom_site = ggplot(data = psmelt(physeq.prune.rarefy.SF), mapping = aes_string(x = "Site" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Sites")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(taxcom_site)
png("./Figures/FigS2A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Site.png", units="in", width = 8, height = 5.8, res = 300 )
taxcom_site
dev.off()
taxcom_site = ggplot(data = psmelt(physeq.prune.rarefy), mapping = aes_string(x = "Crust_type" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Crust types")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(taxcom_site)
png("./Figures/FigS2A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Crust_type.png", units="in", width = 8, height = 5.8, res = 300 )
taxcom_site
dev.off()
taxcom_site = ggplot(data = psmelt(physeq.prune.rarefy), mapping = aes_string(x = "Crust_type" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Crust types")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw()
print(taxcom_site)
png("./Figures/FigS2A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Crust_type.png", units="in", width = 8, height = 5.8, res = 300 )
taxcom_site
dev.off()
png("./Figures/FigS2A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Crust_type.png", units="in", width = 8, height = 5.8, res = 300 )
taxcom_site + theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
taxcom_site = ggplot(data = psmelt(physeq.prune.rarefy), mapping = aes_string(x = "Crust_type" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Crust types")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(taxcom_site)
png("./Figures/FigS2A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Crust_type.png", units="in", width = 8, height = 5.8, res = 300 )
taxcom_site + theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
taxcom_layer = ggplot(data = psmelt(physeq.prune.rarefy), mapping = aes_string(x = "Layer" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Layer")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(taxcom_layer)
png("./Figures/Fig4A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Layer.png", units="in", width = 8, height = 5.8, res = 300 )
taxcom_layer
dev.off()
taxcom_crusttype = ggplot(data = psmelt(physeq.prune.rarefy.SF), mapping = aes_string(x = "Crust_type" ,y = "Abundance", fill = "Phylum" )) +
geom_bar(stat="identity", position="fill") +
ggtitle("Bacterial Taxonomic Composition (Phylum level) by Crust types")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(taxcom_crusttype)
png("./Figures/FigS2A_Bacterial_Taxonomic_Composition_(Phylum_level)_by_Crust_type.png", units="in", width = 8, height = 5.8, res = 300 )
taxcom_crusttype #+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
APS = subset_taxa(physeq.prune.rarefy, Phylum == "D_1__Actinobacteria")
alpha.diversity.actino = estimate_richness(APS, measures = c("Observed"))
data.anova.actino = cbind(sample_data(APS), alpha.diversity.actino)
t.test(Observed ~ Layer, data.anova.actino)
APS = subset_taxa(physeq.prune.rarefy, Phylum == "D_1__Actinobacteria")
alpha.diversity.actino = estimate_richness(APS, measures = c("Observed"))
data.anova.actino = cbind(sample_data(APS), alpha.diversity.actino)
t.test(Observed ~ Layer, data.anova.actino)
set.seed(711)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 37435, replace = FALSE, trimOTUs = TRUE)
physeq.prune.rarefy
APS = subset_taxa(physeq.prune.rarefy, Phylum == "D_1__Actinobacteria")
alpha.diversity.actino = estimate_richness(APS, measures = c("Observed"))
data.anova.actino = cbind(sample_data(APS), alpha.diversity.actino)
t.test(Observed ~ Layer, data.anova.actino)
APS = subset_taxa(physeq.prune.rarefy, Phylum == "D_1__Acidobacteria")
alpha.diversity.acido = estimate_richness(APS, measures = c("Observed"))
data.anova.acido = cbind(sample_data(APS), alpha.diversity.acido)
t.test(Observed ~ Layer, data.anova.acido)
APS = subset_taxa(physeq.prune.rarefy, Phylum == "D_1__Cyanobacteria")
alpha.diversity.cyano = estimate_richness(APS, measures = c("Observed"))
data.anova.cyano = cbind(sample_data(APS), alpha.diversity.cyano)
t.test(Observed ~ Layer, data.anova.cyano)
