ps.taxglom.prune = prune_taxa(names(sort(taxa_sums(physeq.prune.rarefy), TRUE))[1:1000], physeq.prune.rarefy)
set.seed(711L)
psplotnet = plot_net(ps.taxglom.prune, distance = "bray", type = "taxa", laymeth = "circle", color = "Genus", point_label ="Genus", hjust = 0.2, maxdist = 0.2) + ggtitle("Biocrust Bacterial Community Network Analysis")  + theme(plot.title = element_text(hjust = 0.5))
psplotnet
df = psplotnet$data
df.v1 = data.frame(OTU1 = df$v1, stringsAsFactors = T )
df.v2 = data.frame(OTU1 = df$v2, stringsAsFactors = T )
df.v1.v2 = rbind(df.v1,df.v2)
tax.circlize <- read.table("taxonomy_phyloseq_fix.csv", header=T,sep=",")
cdf = data.frame(OTU1 = df$v1, OTU2 = df$v2, Similarity = as.vector(1-df$Distance), stringsAsFactors = TRUE )
cdf.w.tax = data.frame(OTU1=tax.circlize[match(cdf$OTU1, tax.circlize$OTU.ID), 8], OTU2=tax.circlize[match(cdf$OTU2, tax.circlize$OTU.ID), 8], Similarity=cdf$Similarity, stringsAsFactors = FALSE)
cdf.w.tax
cdf.w.tax$OTU1 <- as.character(cdf.w.tax$OTU1)
cdf.w.tax$OTU2 <- as.character(cdf.w.tax$OTU2)
str(cdf.w.tax)
cdf.w.tax[is.na(cdf.w.tax)] <- "unidentified"
circos.clear()
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
circos.clear()
pdf("Figures/Biocrust Bacterial Community Network Analysis.pdf", width = 18, height = 18)
chordDiagram(cdf.w.tax, annotationTrack = "grid", annotationTrackHeight = 0.01, preAllocateTracks = 1, link.visible = cdf.w.tax[[3]] > 0.85)
for(si in get.all.sector.index()) {
xlim = get.cell.meta.data("xlim", sector.index = si, track.index = 1)
ylim = get.cell.meta.data("ylim", sector.index = si, track.index = 1)
circos.text(mean(xlim), ylim[1], si, facing = "clockwise", adj = c(-0.1, -0.2),
niceFacing = TRUE, cex = 1.2, col = "black", sector.index = si, track.index = 1)
}
title(main = "Biocrust Bacterial Community Network Analysis")
circos.clear()
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(vegan)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(data.table)
library(tidyr)
library(tidyverse)
library(multcompView)
library(VennDiagram)
otu = read.table(file="MojaveBacQ2FWLEsilva515806.otu_table.fix.txt", header=T, sep='\t')
otus <- read.table("MojaveBacQ2FWLEsilva515806.otu_table.fix.txt",
header=T,sep="\t",row.names = 1)
otumat <- as(as.matrix(otus), "matrix")
OTU = otu_table(otumat, taxa_are_rows = TRUE)
taxmat <- read.csv("taxonomy_phyloseq_fix.csv",
sep=",",row.names=1)
row.names(taxmat) = taxmat$OTU.ID
taxmat <- as(as.matrix(taxmat),"matrix")
TAX = tax_table(taxmat)
treefile = "tree.nwk"
tree = read.tree(treefile)
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",
header=TRUE,row.names=1,
sep="\t",stringsAsFactors=FALSE)
#meta <- meta[which(meta$Layer %in% c("Surface")),]
sampleData <- sample_data(meta)
physeq = phyloseq(OTU,TAX,sampleData,tree)
physeq
physeq.prune = prune_taxa(taxa_sums(physeq) > 5, physeq)
physeq.prune
set.seed(711)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 37435, replace = FALSE, trimOTUs = TRUE)
physeq.prune.rarefy
venn_diagram2 <- function(a, b, name_a = "A", name_b = "B", colors =  c("#e41a1c","#377eb8"), out = FALSE, file_name = "default.pdf", euler = FALSE, main = "main"){
# Niels Hanson
# https://github.com/hallamlab/mp_tutorial/blob/master/downstream_analysis_r/code/venn_diagram2.r
# Info: A function to create a venn digagram between three (3) overapping sets a, b, and c.
# Requies: The VennDiagram R package, the program will try to download and install if you dont
#          have it.
# Inputs: a,b,c - vertical vectors or the first column of matrixes as sets of strings to be compared
#         name_a, name_b, and name_c - names that you give to sets a, b, and c, respectively
#         these will appear in the final image
#         colors - a vector of colors defined in hex format ie. colors <- c("#B80830","#EACC33","#46E2D9")
#         it might be a good idea that these mix well as the interlapping classes will be a mix of colors
#         Colors must be specified in hex ie. "#123456", google "hex colors" for more info
#         name_output - the name of the output image that will be put in R's current working directory
#         you can set this yourself before running. ie. setwd("~/my-director/")
# A: find all classes for set a, a_b, a_c, a_b_c
# number in a, we will use this at the end for a sanity check
# make sure that a,b,c are all sets, get rid of duplicates
a <- intersect(a,a)
b <- intersect(b,b)
# length of a
a_tot <- length(a)
# length of b
b_tot <- length(b)
# number shared between a and b and c
a_b <- intersect(a,b)
a_b_tot <- length(a_b)
a_b_tot
a_only <- setdiff(a,b)
a_only_tot <- length(a_only)
b_only <- setdiff(b,a)
b_only_tot <- length(b_only)
# try to load VennDiagram else try to download it
# More info: see Hanbo Chen and Paul C Boutros. BMC Bioinformatics 2011, 12:35 doi:10.1186/1471-2105-12-35
try(library(VennDiagram), install.packages("VennDiagram"))
library(VennDiagram)
# create the venn diagram and output into the current working directory
temp <- list(
name_a = c(1:length(a)),
name_b = c((length(a_only)+1):((length(a_only))+length(b)))
)
names(temp) <- c(name_a,name_b)
output <- venn.diagram(
x = temp,
filename = NULL,
col = "grey28",
fill = c(colors[1], colors[2]),
alpha = 0.5,
label.col = c("grey28"),
cex = 2.5,
fontface = "bold",
fontfamily = "sans",
cat.default.pos = "text",
cat.col = c("grey28"),
cat.cex = 2.5,
cat.fontfamily = "sans",
cat.dist = c(0.06, 0.06),
cat.pos = c(-20, 14),
euler.d = euler,
scaled = euler,
main = main,
main.fontface = "bold",
main.fontfamily = "sans"
);
try(library("grid"), install.packages("grid"))
library(grid)
if (out == TRUE) {
# only produce ouptut files upon request
png(filename = paste(file_name,'.png', sep=''))
grid.draw(output)
dev.off()
pdf(file = paste(file_name,'.pdf', sep=''), width=8, height=8)
grid.draw(output)
dev.off()
} else {
# just plot the figure
grid.draw(output)
}
# pack all the sets up and return to the user
out <- NULL;
a <- c(out, name_a, as.vector(a))
a_only <-  as.vector(a_only)
a_b <- as.vector(a_b)
b <- c(out,name_b,as.vector(b))
b_only <- c(out,paste(name_b,"only",sep="_"),as.vector(b_only))
out <- list(a,a_only,a_b,b,b_only)
names(out) <- c(name_a,
paste(name_a,"only",sep="_"),
paste(name_a,name_b,sep="_"),
name_b,
paste(name_b,"only",sep="_"))
return(out)
}
Bac.physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Rhizaria")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Chromista")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Unassigned")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
Bac.physeq.prune.rarefy
Bac.physeq.prune.rarefy.SF = subset_samples(Bac.physeq.prune.rarefy, Layer=="Surface")
Bac.physeq.prune.rarefy.SF = prune_taxa(taxa_sums(Bac.physeq.prune.rarefy.SF) > 5, Bac.physeq.prune.rarefy.SF)
Bac.physeq.prune.rarefy.SF
Bac.physeq.prune.rarefy.SUB = subset_samples(Bac.physeq.prune.rarefy, Layer=="Subsurface")
Bac.physeq.prune.rarefy.SUB = prune_taxa(taxa_sums(Bac.physeq.prune.rarefy.SUB) > 5, Bac.physeq.prune.rarefy.SUB)
Bac.physeq.prune.rarefy.SUB
OTU.name.Bac.physeq.prune.rarefy.SF = rownames((otu_table(Bac.physeq.prune.rarefy.SF)))
OTU.name.Bac.physeq.prune.rarefy.SUB = rownames((otu_table(Bac.physeq.prune.rarefy.SUB)))
grid.draw(venn.plot)
## plot venn diagrams
# Surface vs Subsurface
pdf("./Figures/Bacteria_Surface_Subsurface_venn.pdf", width = 8, height = 8)
ven_test = venn_diagram2(OTU.name.Bac.physeq.prune.rarefy.SF, OTU.name.Bac.physeq.prune.rarefy.SUB, "Surface", "Subsurface", colors= c("#009E73", "#CC79A7"), euler=TRUE, main = "Bacteria Surface-Subsurface Venn")
dev.off()
venn_diagram2 <- function(a, b, name_a = "A", name_b = "B", colors =  c("#e41a1c","#377eb8"), out = FALSE, file_name = "default.pdf", euler = FALSE, main = "main"){
# Niels Hanson
# https://github.com/hallamlab/mp_tutorial/blob/master/downstream_analysis_r/code/venn_diagram2.r
# Info: A function to create a venn digagram between three (3) overapping sets a, b, and c.
# Requies: The VennDiagram R package, the program will try to download and install if you dont
#          have it.
# Inputs: a,b,c - vertical vectors or the first column of matrixes as sets of strings to be compared
#         name_a, name_b, and name_c - names that you give to sets a, b, and c, respectively
#         these will appear in the final image
#         colors - a vector of colors defined in hex format ie. colors <- c("#B80830","#EACC33","#46E2D9")
#         it might be a good idea that these mix well as the interlapping classes will be a mix of colors
#         Colors must be specified in hex ie. "#123456", google "hex colors" for more info
#         name_output - the name of the output image that will be put in R's current working directory
#         you can set this yourself before running. ie. setwd("~/my-director/")
# A: find all classes for set a, a_b, a_c, a_b_c
# number in a, we will use this at the end for a sanity check
# make sure that a,b,c are all sets, get rid of duplicates
a <- intersect(a,a)
b <- intersect(b,b)
# length of a
a_tot <- length(a)
# length of b
b_tot <- length(b)
# number shared between a and b and c
a_b <- intersect(a,b)
a_b_tot <- length(a_b)
a_b_tot
a_only <- setdiff(a,b)
a_only_tot <- length(a_only)
b_only <- setdiff(b,a)
b_only_tot <- length(b_only)
# try to load VennDiagram else try to download it
# More info: see Hanbo Chen and Paul C Boutros. BMC Bioinformatics 2011, 12:35 doi:10.1186/1471-2105-12-35
try(library(VennDiagram), install.packages("VennDiagram"))
library(VennDiagram)
# create the venn diagram and output into the current working directory
temp <- list(
name_a = c(1:length(a)),
name_b = c((length(a_only)+1):((length(a_only))+length(b)))
)
names(temp) <- c(name_a,name_b)
output <- venn.diagram(
x = temp,
filename = NULL,
col = "grey28",
fill = c(colors[1], colors[2]),
alpha = 0.58,
label.col = c("grey28"),
cex = 2.5,
fontface = "bold",
fontfamily = "sans",
cat.default.pos = "text",
cat.col = c("grey28"),
cat.cex = 2.5,
cat.fontfamily = "sans",
cat.dist = c(0.06, 0.06),
cat.pos = c(-20, 14),
euler.d = euler,
scaled = euler,
main = main,
main.fontface = "bold",
main.fontfamily = "sans"
);
try(library("grid"), install.packages("grid"))
library(grid)
if (out == TRUE) {
# only produce ouptut files upon request
png(filename = paste(file_name,'.png', sep=''))
grid.draw(output)
dev.off()
pdf(file = paste(file_name,'.pdf', sep=''), width=8, height=8)
grid.draw(output)
dev.off()
} else {
# just plot the figure
grid.draw(output)
}
# pack all the sets up and return to the user
out <- NULL;
a <- c(out, name_a, as.vector(a))
a_only <-  as.vector(a_only)
a_b <- as.vector(a_b)
b <- c(out,name_b,as.vector(b))
b_only <- c(out,paste(name_b,"only",sep="_"),as.vector(b_only))
out <- list(a,a_only,a_b,b,b_only)
names(out) <- c(name_a,
paste(name_a,"only",sep="_"),
paste(name_a,name_b,sep="_"),
name_b,
paste(name_b,"only",sep="_"))
return(out)
}
## plot venn diagrams
# Surface vs Subsurface
pdf("./Figures/Bacteria_Surface_Subsurface_venn.pdf", width = 8, height = 8)
ven_test = venn_diagram2(OTU.name.Bac.physeq.prune.rarefy.SF, OTU.name.Bac.physeq.prune.rarefy.SUB, "Surface", "Subsurface", colors= c("#009E73", "#CC79A7"), euler=TRUE, main = "Bacteria Surface-Subsurface Venn")
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(vegan)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(data.table)
library(tidyr)
library(tidyverse)
library(multcompView)
library(VennDiagram)
otus <- read.table("MojaveBacQ2FWLEsilva515806.otu_table.fix.txt",
header=T,sep="\t",row.names = 1)
otumat <- as(as.matrix(otus), "matrix")
OTU = otu_table(otumat, taxa_are_rows = TRUE)
taxmat <- read.csv("taxonomy_phyloseq_fix.csv",
sep=",",row.names=1)
row.names(taxmat) = taxmat$OTU.ID
taxmat <- as(as.matrix(taxmat),"matrix")
TAX = tax_table(taxmat)
treefile = "tree.nwk"
tree = read.tree(treefile)
meta = read.table("Mojave_mappingfile_8-Aug-2018.txt",
header=TRUE,row.names=1,
sep="\t",stringsAsFactors=FALSE)
#meta <- meta[which(meta$Layer %in% c("Surface")),]
sampleData <- sample_data(meta)
physeq = phyloseq(OTU,TAX,sampleData,tree)
physeq
physeq.prune = prune_taxa(taxa_sums(physeq) > 5, physeq)
physeq.prune
readcount = readcount[order(readcount$TotalReads), c("SampleID", "TotalReads")]
readcount = data.table(as(sample_data(physeq.prune), "data.frame"),
TotalReads = sample_sums(physeq.prune),
keep.rownames = TRUE)
setnames(readcount, "rn", "SampleID")
#For plotting, use command below.
#SeqDepth = ggplot(readcount, aes(TotalReads)) + geom_histogram() + ggtitle("Sequencing Depth")
readcount = readcount[order(readcount$TotalReads), c("SampleID", "TotalReads")]
head(readcount)
set.seed(711)
physeq.prune.rarefy = rarefy_even_depth(physeq.prune, sample.size = 37435, replace = FALSE, trimOTUs = TRUE)
physeq.prune.rarefy
Bac.physeq.prune.rarefy = subset_taxa(physeq.prune.rarefy, Kingdom != "Rhizaria")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Chromista")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "Unassigned")
Bac.physeq.prune.rarefy = subset_taxa(Bac.physeq.prune.rarefy, Kingdom != "D_0__Eukaryota")
Bac.physeq.prune.rarefy
Bac.physeq.prune.rarefy.SF = subset_samples(Bac.physeq.prune.rarefy, Layer=="Surface")
Bac.physeq.prune.rarefy.SF = prune_taxa(taxa_sums(Bac.physeq.prune.rarefy.SF) > 5, Bac.physeq.prune.rarefy.SF)
Bac.physeq.prune.rarefy.SF
library(labdsv)
install.packages("labdsv")
library(labdsv)
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
rownames(BacTable) = BacTable[,"Species"]
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
rownames(BacTable) = BacTable[,"Species"]
BacTax
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
#rownames(BacTable) = BacTable[,"Species"]
BacTable$row.names = NULL
BacTable$Species = NULL
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE, row.names=48)
#rownames(BacTable) = BacTable[,"Species"]
#BacTable$row.names = NULL
#BacTable$Species = NULL
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
rownames(BacTable) = BacTable[,"Species"]
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
rownames(BacTable) = make.names(BacTable[,"Species"],unique = T)
#BacTable$row.names = NULL
#BacTable$Species = NULL
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
rownames(BacTable) = make.names(BacTable[,"Species"],unique = T)
BacTable$Row.names = NULL
BacTable$Species = NULL
BacTax
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
#rownames(BacTable) = make.names(BacTable[,"Species"],unique = T)
#BacTable$Row.names = NULL
BacTable$Species = NULL
BacTable
ASV.bac <- t(BacTable)
ASV.bac.no.zero <- ASV.bac[, colSums(ASV.bac != 0) > 0]
ASV.bac.groups <- subset(sampleData,select = "Crust_type")
as.numeric(ASV.bac.groups$Crust_type)
Bac.indic.species <- indval(ASV.bac.no.zero,ASV.bac.groups$Crust_type)
ASV.bac.groups <- subset(sampleData,select = "Crust_type")
ASV.bac.groups
ASV.bac.groups <- subset(sampleData,select = "Crust_type")
ASV.bac.groups
as.numeric(ASV.bac.groups$Crust_type)
ASV.bac.groups
ASV.bac.groups <- subset(sampleData,select = "Crust_type")
ASV.bac.groups.nodot = gsub(".","",ASV.bac.groups)
ASV.bac.groups.nodot
ASV.bac.groups <- subset(sampleData,select = "Crust_type")
ASV.bac.groups.nodot = gsub(".","",ASV.bac.groups)
ASV.bac.groups.nodot
ASV.bac.groups <- subset(sampleData,select = "Crust_type")
ASV.bac.groups.nodot = gsub(".","",ASV.bac.groups$Crust_type)
ASV.bac.groups.nodot
ASV.bac.groups <- subset(sampleData,select = "Crust_type")
ASV.bac.groups.nodot = gsub(".","_",ASV.bac.groups$Crust_type)
ASV.bac.groups.nodot
ASV.bac.groups <- subset(sampleData,select = "Crust_type")
ASV.bac.groups
Bac.physeq.prune.rarefy.SF
ASV.bac.groups <- subset(sample_data(Bac.physeq.prune.rarefy.SF),select = "Crust_type")
ASV.bac.groups
as.numeric(ASV.bac.groups$Crust_type)
ASV.bac.groups
Bac.indic.species <- indval(ASV.bac.no.zero,ASV.bac.groups$Crust_type)
ASV.bac.no.zero <- ASV.bac[, colSums(ASV.bac != 0) > 0]
ASV.bac.no.zero
Bac.indic.species <- indval(ASV.bac,ASV.bac.groups$Crust_type)
ASV.bac
str(ASV.bac)
as.numeric(ASV.bac.groups$Crust_type)
as.numeric(ASV.bac.groups$Crust_type)
ASV.bac.groups <- subset(sample_data(Bac.physeq.prune.rarefy.SF),select = "Crust_type")
ASV.bac.groups
ASV.bac.groups$Crust_type = factor(ASV.bac.groups$Crust_type)
ASV.bac.groups$Crust_type = as.numeric(ASV.bac.groups$Crust_type)
ASV.bac.groups
ASV.bac.no.zero <- ASV.bac[, colSums(ASV.bac != 0) > 0]
ASV.bac.no.zero
Bac.indic.species <- indval(ASV.bac.no.zero,ASV.bac.groups$Crust_type)
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
Bac.physeq.prune.rarefy.SF = prune_taxa(taxa_sums(Bac.physeq.prune.rarefy.SF) > 5, Bac.physeq.prune.rarefy.SF)
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
#rownames(BacTable) = make.names(BacTable[,"Species"],unique = T)
#BacTable$Row.names = NULL
BacTable$Species = NULL
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
Bac.physeq.prune.rarefy.SF = prune_taxa(taxa_sums(Bac.physeq.prune.rarefy.SF) > 5, Bac.physeq.prune.rarefy.SF)
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE, row.names=1)
#rownames(BacTable) = make.names(BacTable[,"Species"],unique = T)
#BacTable$Row.names = NULL
BacTable$Species = NULL
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
Bac.physeq.prune.rarefy.SF = prune_taxa(taxa_sums(Bac.physeq.prune.rarefy.SF) > 5, Bac.physeq.prune.rarefy.SF)
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
rownames(BacTable) = make.names(BacTable[,"Row.names"],unique = T)
BacTable$Row.names = NULL
BacTable$Species = NULL
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
Bac.physeq.prune.rarefy.SF = prune_taxa(taxa_sums(Bac.physeq.prune.rarefy.SF) > 5, Bac.physeq.prune.rarefy.SF)
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
#rownames(BacTable) = make.names(BacTable[,"Row.names"],unique = T)
#BacTable$Row.names = NULL
BacTable$Species = NULL
BacTable
#phyloGlom = tax_glom(fun.nov.control,taxrank = "Species")
Bac.physeq.prune.rarefy.SF = prune_taxa(taxa_sums(Bac.physeq.prune.rarefy.SF) > 5, Bac.physeq.prune.rarefy.SF)
BacTax = tax_table(Bac.physeq.prune.rarefy.SF)[,"Species"]
BacOTU = otu_table(Bac.physeq.prune.rarefy.SF)
BacTable = merge(BacOTU,BacTax,by=0,all=TRUE)
rownames(BacTable) = make.names(BacTable[,"Row.names"],unique = T)
BacTable$Row.names = NULL
BacTable$Species = NULL
BacTable
ASV.bac <- t(BacTable)
ASV.bac.no.zero <- ASV.bac[, colSums(ASV.bac != 0) > 0]
ASV.bac.no.zero
Bac.physeq.prune.rarefy.SF
ASV.bac.groups <- subset(sample_data(Bac.physeq.prune.rarefy.SF),select = "Crust_type")
ASV.bac.groups
ASV.bac.groups$Crust_type = factor(ASV.bac.groups$Crust_type)
ASV.bac.groups$Crust_type = as.numeric(ASV.bac.groups$Crust_type)
ASV.bac.groups
Bac.indic.species <- indval(ASV.bac.no.zero,ASV.bac.groups$Crust_type)
Bac.indic.species
Bac.indic.species <- indval(ASV.bac.no.zero,ASV.bac.groups$Crust_type)
head(Bac.indic.species)
citation("vegan")
